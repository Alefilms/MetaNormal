// main global script file
DynamicSprite *buttonSprite; 
// called when the game starts, before the first room is loaded
function game_start() 
{
  BCerrarInventario.Visible = false;
}


int BuscaPartidas(String nombre)
{
  bool partidas[] = new bool[999];
  int i = 0;
  while (i < ListaDeGuardado.ItemCount)
  {
    if (ListaDeGuardado.Items[i] == nombre)
    {
      // found existing save with matching name
      return ListaDeGuardado.SaveGameSlots[i];
    }
    // remember which slots are already taken
    partidas[ListaDeGuardado.SaveGameSlots[i]] = true;
    i++;
  }
 
  // Find first free save slot, starting with slot 1
  i = 1;
  while (i < 999)
  {
    if (!partidas[i])
      return i;
    i++;
  }
  // no free slots found
  return -1;
}

function MuestraDialogoDeGuardado()
{
  gGuardar.Visible = true;
  // Muestra la lista de guardados
  ListaDeGuardado.FillSaveGameList();
 // Muestra la imagen de la partida  
   int PartidaGuardada = ListaDeGuardado.SaveGameSlots[ListaDeGuardado.SelectedIndex];

      buttonSprite = DynamicSprite.CreateFromSaveGame(PartidaGuardada, 500, 330);

if (buttonSprite != null) 
    {
      BScreenShot.NormalGraphic = buttonSprite.Graphic;
    }


  
  if (ListaDeGuardado.ItemCount > 0)
  {
    // If there is at least one, set the default text
    // to be the first game's name
    TxtNuevoGuardado.Text = ListaDeGuardado.Items[0];
  }
  else
  {
    // No save games yet, default empty text.
    TxtNuevoGuardado.Text = "";
  }
  mouse.UseModeGraphic(eModePointer);

}

// put anything you want to happen every game cycle in here
function repeatedly_execute() 
{
}

// put here anything you want to happen every game cycle, even when the game is blocked
function repeatedly_execute_always() 
{
}

// called when a key is pressed. keycode holds the key's ASCII code
function on_key_press(eKeyCode keycode) 
{
  if (IsGamePaused()) keycode = 0; // game paused, so don't react to keypresses
  
  if (keycode == eKeyCtrlQ) QuitGame(1); // Ctrl-Q
  if (keycode == eKeyF9) RestartGame(); // F9
  if (keycode == eKeyF12) SaveScreenShot("scrnshot.pcx");  // F12
  if (keycode == eKeyCtrlS) Debug(0,0); // Ctrl-S, give all inventory
  if (keycode == eKeyCtrlV) Debug(1,0); // Ctrl-V, version
  if (keycode == eKeyCtrlA) Debug(2,0); // Ctrl-A, show walkable areas
  if (keycode == eKeyCtrlX) Debug(3,0); // Ctrl-X, teleport to room
  
  //Cerrar el gui de guardar
  if ((keycode == eKeyEscape) && (gGuardar.Visible == true))
  {
    gGuardar.Visible = false;
  }
  
  // Abrir el menu aprentando Escape
  if (keycode == eKeyEscape)
  {
  
    int transMenu = gMenu.Transparency;
    int transFade =gFade.Transparency;
     if (gConfirmacionDeSalir.Visible == true)
       {
         gConfirmacionDeSalir.Visible = false;
       }
      
      if (player.Room == 4)
      {
        
      }
         // Hacer visible el menu----------------------
    else if ( gMenu.Visible == false)
    {
         mouse.Mode = eModePointer;
      gMenu.Visible = true;
      gFade.Visible = true;
        while (transMenu > 20 ) 
        {
            
          transMenu--;
          transFade--;
          gMenu.Transparency = transMenu;
          gFade.Transparency = transFade;
          Wait(1);
        }
    }
         // Hacer invisible el menu------------------------
      else if ( gMenu.Visible == true)
       {
          
     
        while (transMenu < 70 ) 
        {
          transMenu++;
          transFade++;
          gMenu.Transparency = transMenu;
          gFade.Transparency = transFade;
          Wait(1);
            if (transMenu == 70)
            {
              gMenu.Visible = false;
              gFade.Visible = false;
           mouse.Mode = eModeWalkto;
            }
        }
       }

   
  }

}

function on_mouse_click(MouseButton button) // called when a mouse button is clicked. button is either LEFT or RIGHT
{
  if (IsGamePaused() == 1) // Game is paused, so do nothing (ie. don't allow mouse click)
  {
  }
  else if (button == eMouseLeft) 
  {
    Room.ProcessClick(mouse.x,mouse.y, mouse.Mode);
  }
  else // right-click, so cycle cursor
  {   
    mouse.SelectNextMode();
  }
}


function dialog_request(int param) {
}

function Hablar (String Loquedice)
{
}
function HablarSantiago (String Loquedice)
{
}

function TalkDefault ()
{
}

function HablarCosa (String Loquedice)
{
  }

function BFlechaArriba_OnClick(GUIControl *control, MouseButton button)
{
InventoryWindow1.ScrollUp();
}

function BFlechaAbajo_OnClick(GUIControl *control, MouseButton button)
{
InventoryWindow1.ScrollDown();
}

function BAbrirInventario_OnClick(GUIControl *control, MouseButton button)
{
 if (gInventario.Visible == false)
 {
  gInventario.Visible = true;
  BAbrirInventario.Visible = false;
  BCerrarInventario.Visible = true;
 }
}

function BCerrarInventario_OnClick(GUIControl *control, MouseButton button)
{
if (gInventario.Visible == true)
 {
  gInventario.Visible = false;
  BCerrarInventario.Visible = false;
  BAbrirInventario.Visible = true;
 }

}

function BResumir_OnClick(GUIControl *control, MouseButton button)
{
  int transMenu = gMenu.Transparency;
  int transFade = gFade.Transparency; 
if ( gMenu.Visible == true)
       {
        while (transMenu < 70 ) 
        {
          transMenu++;
          transFade++;
          gMenu.Transparency = transMenu;
          gFade.Transparency = transFade;
          Wait(1);
            if (transMenu == 70)
            {
              gMenu.Visible = false;
              gFade.Visible = false;
            }
        }
       }
}


function BSi_OnClick(GUIControl *control, MouseButton button)
{
QuitGame(0);
}

function BNo_OnClick(GUIControl *control, MouseButton button)
{
gConfirmacionDeSalir.Visible = false;
}

function BSalir_OnClick(GUIControl *control, MouseButton button)
{
gConfirmacionDeSalir.Visible = true;
}

function BSalirInicio_OnClick(GUIControl *control, MouseButton button)
{
gConfirmacionDeSalir.Visible = true;
}

function BNuevaPartida_OnClick(GUIControl *control, MouseButton button)
{
gMenuInicio.Visible = false;
player.ChangeRoom(1);
}

function BGuardarMenu_OnClick(GUIControl *control, MouseButton button)
{
MuestraDialogoDeGuardado();
}
//Guarda la partida
function BGuardar_OnClick(GUIControl *control, MouseButton button)
{
   int LugarAGuardarPartida = BuscaPartidas(TxtNuevoGuardado.Text);
  if (LugarAGuardarPartida < 0)
  {
    return;
  }
gGuardar.Visible = false;
gMenu.Transparency = 70;
gFade.Transparency = 100;
gFade.Visible = false;
gMenu.Visible = false;
Wait(1);
SaveGameSlot(LugarAGuardarPartida, TxtNuevoGuardado.Text);
}
//Cancela el guardado
function BCancelarGuardado_OnClick(GUIControl *control, MouseButton button)
{
gGuardar.Visible = false;
}
// Borra la partida
function BBorrar_OnClick(GUIControl *control, MouseButton button)
{
  if (ListaDeGuardado.SelectedIndex >= 0)
  {
    DeleteSaveSlot(ListaDeGuardado.SaveGameSlots[ListaDeGuardado.SelectedIndex]);
    ListaDeGuardado.FillSaveGameList();
  }
}
//Guarda la partida si aprentamos enter una vez despues de escribir
function TxtNuevoGuardado_OnActivate(GUIControl *control)
{
BGuardar_OnClick(control, eMouseLeft);
}
// Muestra en el TXT la partida seleccionada
function ListaDeGuardado_OnSelectionChanged(GUIControl *control)
{
TxtNuevoGuardado.Text = ListaDeGuardado.Items[ListaDeGuardado.SelectedIndex];
}
